version: 2.1

commands:
  install_awscli:
    description: Installing AWS CLI v2
    steps:
      - run:
          name: Installing AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_ansible:
    description: Installing ansible 
    steps:
      - run:
          name: Installing  Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y

  install_nodejs:
   description: Installing  Node.js 13
   steps:
      - run:
          name: Installing Node.js 13
          command: |
            sudo apt-get update
            curl -fsSL https://deb.nodesource.com/setup_14.x | sudo -E bash -
            sudo apt-get install -y nodejs

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
        type: "string"
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |

            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
            aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive 

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure  https://kvdb.io/WfShvZcqBSGAUrVKiup1rd/migration_$\{CIRCLE_WORKFLOW_ID:0:7})
            # Logic for reverting the database state
            echo $SUCCESS
            if [[ $SUCCESS == 1 ]];
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi          
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
              cd frontend
              npm install
              npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
              cd backend
              npm install
              npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build    

  test-frontend:
    docker: 
      - image: circleci/node:13.8.0 # Docker image here
    steps:
      - checkout # Checkout code from git
      - restore_cache: # Restore from cache
          keys: [test-frontend]
      - run: # Your job code here
          name: Testing frntend build
          command: |
              cd frontend
              npm install
              npm run test
    
  test-backend:
    docker:
      - image: circleci/node:13.8.0 # Docker image here
    steps:
      - checkout # Checkout code from git
      - restore_cache: # Restore from cache
          keys: [test-backend]
      - run: # Your job code here
          name: Testing bckend build
          command: |
              cd backend
              npm install
              npm run test  
  
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout # Docker image here
      - restore_cache: # Checkout code from git
          keys: [scan-frontend]
      - run: # Your job code here
          name: Scaning frntend build
          command: |
              cd frontend
              npm install
              npm audit fix --force --audit-level=critical
              npm audit fix --force --audit-level=critical
              npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout # Docker image here
      - restore_cache: # Checkout code from git
          keys: [scan-backend]
      - run: # Your job code here
          name: Scanning bckend build
          command: |
              cd backend
              npm install
              npm audit fix --force --audit-level=critical
              npm audit fix --force --audit-level=critical
              npm audit --audit-level=critical
  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli # Docker image here that supports AWS CLI
    steps: 
      - checkout # Checkout code from git
      - run:
          name: Install tar and gzip
          command: |
            yum -y install tar
            yum -y install gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: | 
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
             aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cd .circleci/ansible
            pwd
            ls -lrt
            cat inventory.txt
            BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)
            echo $BACKEND_IP
            echo $BACKEND_IP >> ~/project/.circleci/ansible/inventory.txt
            #echo "[web]" >> ~/project/.circleci/ansible/inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment # Here's where you will add some code to rollback on failure
  
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11 # Docker image here that supports Ansible
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["fa:fb:47:4c:8f:c4:c9:ff:a7:5b:f5:de:9d:f4:ca:67:ff:4a:2a:be"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Installing Ansible.
          command: |
            apk add --update ansible
      - run:
          name: Installing Dependencies
          command: |
            # Your code here
            apk add --update tar gzip ansible nodejs npm curl && \
            pip install awscli

      - run:
          name: Configuring server
          command: |
            # Your code here
            cd .circleci/ansible && \
            cat inventory.txt && \
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure 
      - destroy-environment

  run-migrations:
    docker:
      - image: cimg/node:14.17.4 # Docker image here that supports NodeJS
    steps:
      - checkout # Checkout code from git
      - attach_workspace: 
          at: ~/
      - install_awscli
      - install_nodejs
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Sending Migration to KVDB
          command: |
            cat ~/project/backend/migrations_dump.txt
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              echo "Hello there !!!"
              curl --insecure https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      #- destroy-environment # Here's where you will add some code to rollback on failure

  deploy-frontend:
    docker:
      - image: cimg/base:stable # Docker image here that supports AWS CLI
    steps:
      - checkout # Checkout code from git
      - add_ssh_keys:
          fingerprints: 
          - "fa:fb:47:4c:8f:c4:c9:ff:a7:5b:f5:de:9d:f4:ca:67:ff:4a:2a:be"
      - attach_workspace:
         at: ~/    
      - install_awscli
      - install_nodejs
      - install_ansible
      - run:
          name: Install dependenciess
          command: |
           cd frontend
           npm install
      - run:
          name: Get backend url
          command: |
           export BACKEND_IP=$(aws ec2 describe-instances \
             --filter Name=tag:Name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
             --query 'Reservations[*].Instances[*].PublicIpAddress' \
             --output text);

           export API_URL="http://${BACKEND_IP}:3030"
           echo "API_URL = ${API_URL}"
           echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
           echo ENVIRONMENT=production  >> frontend/.env
           echo NODE_ENV=production >> frontend/.env 
           cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
           cd frontend
           npm install
           npm run build
           tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
           aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
     # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations
  
  deploy-backend:
    docker: # Docker image here that supports Ansible
      - image: cimg/base:stable
    steps:
      - checkout # Checkout code from git
      - add_ssh_keys:
          fingerprints: # Add ssh keys with fingerprint
            - "fa:fb:47:4c:8f:c4:c9:ff:a7:5b:f5:de:9d:f4:ca:67:ff:4a:2a:be"
      - attach_workspace: # attach workspace
         at: ~/
      - install_awscli
      - install_ansible
      - install_nodejs
      - run:
          name: Installing npm dependencies 
          command: |
            cd backend
            npm install

      - run:
          name: Deploying backend
          command: |
            cd backend
            npm run build
            cd ..
            cd .circleci/ansible/
            mkdir files
            cd files
            tar -C ../../../backend -czvf artifact.tar.gz .
            cd ../
            pwd
            ls -larth
            echo "-------INVENTORY -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
        # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations
  
  
  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: cimg/base:stable
    steps:
      # Checkout code from git
      - checkout
      - install_awscli
      - install_nodejs


      - run:
          name: Backend smoke test.
          command: |
           export BACKEND_IP=$(aws ec2 describe-instances \
             --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
             --query 'Reservations[*].Instances[*].PublicIpAddress' \
             --output text)
           export API_URL="http://${BACKEND_IP}:3030"
           echo ${API_URL}
           if curl -s $API_URL/api/status | grep "ok"
           then
            exit 0
           else
            exit 1
           fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            FRONTEND_WEBSITE=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com/#/employees
            if curl -s $FRONTEND_WEBSITE | grep "Welcome"
            then
              exit 1
            else
              exit 1
            fi
      # Here's where you will add some code to rollback on failure  
      - destroy-environment
      - revert-migrations